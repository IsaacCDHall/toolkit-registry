{
  "name": "food-gallery",
  "type": "registry:component",
  "title": "Food Gallery",
  "description": "Beautiful food gallery with masonry layout, filtering, and lightbox functionality",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "food-gallery.tsx",
      "path": "registry/restaurant-components/food-gallery/food-gallery.tsx",
      "content": "import React, { useState } from \"react\";\nimport Image from \"next/image\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface GalleryItem {\n  id: string;\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  category?: string;\n  description?: string;\n}\n\nexport interface FoodGalleryProps {\n  items: GalleryItem[];\n  title?: string;\n  subtitle?: string;\n  variant?: \"grid\" | \"masonry\";\n  columns?: 2 | 3 | 4;\n  gap?: \"small\" | \"medium\" | \"large\";\n  showCategories?: boolean;\n  enableLightbox?: boolean;\n  className?: string;\n}\n\nexport function FoodGallery({\n  items,\n  title = \"Our Culinary Creations\",\n  subtitle,\n  variant = \"masonry\",\n  columns = 3,\n  gap = \"medium\",\n  showCategories = true,\n  enableLightbox = true,\n  className,\n}: FoodGalleryProps) {\n  const [activeFilter, setActiveFilter] = useState<string | null>(null);\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [activeImageIndex, setActiveImageIndex] = useState(0);\n\n  if (!items || items.length === 0) {\n    return null;\n  }\n\n  // Extract unique categories\n  const categories = items\n    .map((item) => item.category)\n    .filter(\n      (category, index, self) => category && self.indexOf(category) === index\n    ) as string[];\n\n  // Filter items by active category\n  const filteredItems = activeFilter\n    ? items.filter((item) => item.category === activeFilter)\n    : items;\n\n  // Column and gap classes\n  const columnClasses = {\n    2: \"grid-cols-1 sm:grid-cols-2\",\n    3: \"grid-cols-1 sm:grid-cols-2 lg:grid-cols-3\",\n    4: \"grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\",\n  };\n\n  const gapClasses = {\n    small: \"gap-2\",\n    medium: \"gap-4\",\n    large: \"gap-6\",\n  };\n\n  // Handle image click for lightbox\n  const openLightbox = (index: number) => {\n    if (enableLightbox) {\n      setActiveImageIndex(index);\n      setLightboxOpen(true);\n    }\n  };\n\n  // Lightbox navigation\n  const navigateLightbox = (direction: \"next\" | \"prev\") => {\n    if (direction === \"next\") {\n      setActiveImageIndex((prevIndex) =>\n        prevIndex === filteredItems.length - 1 ? 0 : prevIndex + 1\n      );\n    } else {\n      setActiveImageIndex((prevIndex) =>\n        prevIndex === 0 ? filteredItems.length - 1 : prevIndex - 1\n      );\n    }\n  };\n\n  return (\n    <div className={cn(\"w-full py-12 px-4\", className)}>\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        {title && <h2 className=\"text-3xl font-serif mb-2\">{title}</h2>}\n        {subtitle && (\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">{subtitle}</p>\n        )}\n      </div>\n\n      {/* Category filters */}\n      {showCategories && categories.length > 0 && (\n        <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\n          <button\n            className={`px-4 py-2 rounded-full text-sm transition-colors ${\n              activeFilter === null\n                ? \"bg-amber-500 text-white\"\n                : \"bg-gray-100 hover:bg-gray-200 text-gray-800\"\n            }`}\n            onClick={() => setActiveFilter(null)}\n          >\n            All\n          </button>\n          {categories.map((category) => (\n            <button\n              key={category}\n              className={`px-4 py-2 rounded-full text-sm transition-colors ${\n                activeFilter === category\n                  ? \"bg-amber-500 text-white\"\n                  : \"bg-gray-100 hover:bg-gray-200 text-gray-800\"\n              }`}\n              onClick={() => setActiveFilter(category)}\n            >\n              {category}\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Gallery grid */}\n      {variant === \"grid\" ? (\n        <div className={`grid ${columnClasses[columns]} ${gapClasses[gap]}`}>\n          {filteredItems.map((item, index) => (\n            <div\n              key={item.id}\n              className=\"overflow-hidden rounded-lg bg-gray-100 group\"\n              onClick={() => openLightbox(index)}\n            >\n              <div className=\"relative aspect-square bg-gray-100 cursor-pointer\">\n                <Image\n                  src={item.src}\n                  alt={item.alt}\n                  fill\n                  className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                  sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw\"\n                />\n                {item.description && (\n                  <div className=\"absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-4\">\n                    <p className=\"text-white text-sm\">{item.description}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        // Masonry layout\n        <div className={`grid ${columnClasses[columns]} ${gapClasses[gap]}`}>\n          {filteredItems.map((item, index) => {\n            // For masonry layout, calculate aspect ratio to create visual variety\n            const aspectRatio = item.height / item.width;\n            const spanClasses = aspectRatio > 1.2 ? \"row-span-2\" : \"\";\n\n            return (\n              <div\n                key={item.id}\n                className={`overflow-hidden rounded-lg bg-gray-100 group ${spanClasses}`}\n                onClick={() => openLightbox(index)}\n              >\n                <div\n                  className=\"relative cursor-pointer\"\n                  style={{\n                    paddingBottom: `${(item.height / item.width) * 100}%`,\n                  }}\n                >\n                  <Image\n                    src={item.src}\n                    alt={item.alt}\n                    fill\n                    className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                    sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw\"\n                  />\n                  {item.description && (\n                    <div className=\"absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-4\">\n                      <p className=\"text-white text-sm\">{item.description}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Lightbox */}\n      {lightboxOpen && filteredItems.length > 0 && (\n        <div className=\"fixed inset-0 z-50 bg-black bg-opacity-90 flex items-center justify-center\">\n          <button\n            className=\"absolute top-4 right-4 text-white p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-70 z-10\"\n            onClick={() => setLightboxOpen(false)}\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          <button\n            className=\"absolute left-4 top-1/2 -translate-y-1/2 text-white p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-70\"\n            onClick={() => navigateLightbox(\"prev\")}\n          >\n            &lt;\n          </button>\n\n          <div className=\"relative max-w-4xl max-h-[80vh] w-full\">\n            <Image\n              src={filteredItems[activeImageIndex].src}\n              alt={filteredItems[activeImageIndex].alt}\n              width={filteredItems[activeImageIndex].width}\n              height={filteredItems[activeImageIndex].height}\n              className=\"mx-auto max-h-[80vh] object-contain\"\n            />\n\n            {filteredItems[activeImageIndex].description && (\n              <div className=\"absolute bottom-0 inset-x-0 bg-black bg-opacity-60 p-4 text-white\">\n                <p>{filteredItems[activeImageIndex].description}</p>\n                {filteredItems[activeImageIndex].category && (\n                  <span className=\"inline-block px-2 py-1 bg-amber-500 text-white text-xs rounded mt-2\">\n                    {filteredItems[activeImageIndex].category}\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n\n          <button\n            className=\"absolute right-4 top-1/2 -translate-y-1/2 text-white p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-70\"\n            onClick={() => navigateLightbox(\"next\")}\n          >\n            &gt;\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "name": "gallery-utils.ts",
      "path": "registry/restaurant-components/food-gallery/gallery-utils.ts",
      "content": "import { GalleryItem } from \"./food-gallery\";\n\n/**\n * Generate sample food gallery items for demonstration purposes\n *\n * @returns Array of GalleryItem objects\n */\nexport function getSampleGalleryItems(): GalleryItem[] {\n  return [\n    {\n      id: \"dish-1\",\n      src: \"https://images.unsplash.com/photo-1504674900247-0877df9cc836\",\n      alt: \"Grilled salmon dish\",\n      width: 1200,\n      height: 800,\n      category: \"Main Course\",\n      description:\n        \"Pan-seared Atlantic salmon with lemon dill sauce and seasonal vegetables\",\n    },\n    {\n      id: \"dish-2\",\n      src: \"https://images.unsplash.com/photo-1551183053-bf91a1d81141\",\n      alt: \"Chocolate dessert\",\n      width: 1200,\n      height: 1600, // Taller image for masonry layout\n      category: \"Dessert\",\n      description:\n        \"Chocolate lava cake with vanilla bean ice cream and berry compote\",\n    },\n    {\n      id: \"dish-3\",\n      src: \"https://images.unsplash.com/photo-1540189549336-e6e99c3679fe\",\n      alt: \"Fresh salad\",\n      width: 1200,\n      height: 800,\n      category: \"Appetizer\",\n      description:\n        \"Organic mixed greens with house-made vinaigrette, local goat cheese and candied walnuts\",\n    },\n    {\n      id: \"dish-4\",\n      src: \"https://images.unsplash.com/photo-1476224203421-9ac39bcb3327\",\n      alt: \"Steak dinner\",\n      width: 1200,\n      height: 900,\n      category: \"Main Course\",\n      description:\n        \"Dry-aged ribeye steak with truffle mashed potatoes and roasted asparagus\",\n    },\n    {\n      id: \"dish-5\",\n      src: \"https://images.unsplash.com/photo-1563805042-7684c019e1cb\",\n      alt: \"Artisan cocktail\",\n      width: 1200,\n      height: 1800, // Taller image for masonry layout\n      category: \"Drinks\",\n      description:\n        \"Hand-crafted old fashioned with house-made bitters and orange zest\",\n    },\n    {\n      id: \"dish-6\",\n      src: \"https://images.unsplash.com/photo-1534766555764-ce878a5e3a2b\",\n      alt: \"Seafood appetizer\",\n      width: 1200,\n      height: 800,\n      category: \"Appetizer\",\n      description: \"Fresh oysters with mignonette sauce and lemon\",\n    },\n    {\n      id: \"dish-7\",\n      src: \"https://images.unsplash.com/photo-1551024506-0bccd828d307\",\n      alt: \"Vegetarian entree\",\n      width: 1200,\n      height: 800,\n      category: \"Main Course\",\n      description: \"Wild mushroom risotto with truffle oil and parmesan crisp\",\n    },\n    {\n      id: \"dish-8\",\n      src: \"https://images.unsplash.com/photo-1513442542250-854d436a73f2\",\n      alt: \"Signature dessert\",\n      width: 1200,\n      height: 900,\n      category: \"Dessert\",\n      description:\n        \"Deconstructed tiramisu with espresso reduction and mascarpone cream\",\n    },\n    {\n      id: \"dish-9\",\n      src: \"https://images.unsplash.com/photo-1482049016688-2d3e1b311543\",\n      alt: \"Craft beer\",\n      width: 1200,\n      height: 800,\n      category: \"Drinks\",\n      description: \"House-brewed IPA with notes of citrus and pine\",\n    },\n  ];\n}\n\n/**\n * Format Prismic gallery data to match component structure\n *\n * @param prismicData Raw data from Prismic CMS\n * @returns Formatted gallery items array\n */\nexport interface PrismicGalleryItem {\n  id?: string;\n  data?: {\n    image?: {\n      url?: string;\n      alt?: string;\n      dimensions?: {\n        width?: number;\n        height?: number;\n      };\n    };\n    title?: { text?: string };\n    description?: { text?: string };\n    category?: { text?: string };\n  };\n}\n\nexport function formatPrismicGalleryItems(\n  prismicData: PrismicGalleryItem[]\n): GalleryItem[] {\n  if (!prismicData || !Array.isArray(prismicData)) {\n    return [];\n  }\n\n  return prismicData\n    .filter((item) => item?.data?.image?.url) // Only include items with images\n    .map((item, index) => ({\n      id: item.id || `gallery-item-${index}`,\n      src: item.data?.image?.url || \"\",\n      alt:\n        item.data?.image?.alt ||\n        item.data?.title?.text ||\n        `Gallery image ${index}`,\n      width: item.data?.image?.dimensions?.width || 1200,\n      height: item.data?.image?.dimensions?.height || 800,\n      category: item.data?.category?.text || undefined,\n      description: item.data?.description?.text || undefined,\n    }));\n}\n",
      "type": "registry:lib"
    },
    {
      "name": "gallery-demo.tsx",
      "path": "registry/restaurant-components/food-gallery/gallery-demo.tsx",
      "content": "import React, { useState } from \"react\";\nimport { FoodGallery } from \"./food-gallery\";\nimport { getSampleGalleryItems } from \"./gallery-utils\";\n\nexport interface GalleryDemoProps {\n  initialVariant?: \"grid\" | \"masonry\";\n}\n\nexport function GalleryDemo({ initialVariant = \"masonry\" }: GalleryDemoProps) {\n  const [variant, setVariant] = useState<\"grid\" | \"masonry\">(initialVariant);\n  const [columns, setColumns] = useState<2 | 3 | 4>(3);\n\n  // Get sample gallery items\n  const galleryItems = getSampleGalleryItems();\n\n  // Handle variant change\n  const handleVariantChange = (newVariant: \"grid\" | \"masonry\") => {\n    setVariant(newVariant);\n  };\n\n  // Handle columns change\n  const handleColumnsChange = (newColumns: 2 | 3 | 4) => {\n    setColumns(newColumns);\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Demo controls */}\n      <div className=\"max-w-4xl mx-auto mb-8 px-4\">\n        <h2 className=\"text-2xl font-semibold mb-4\">Food Gallery Component</h2>\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Layout Style\n            </label>\n            <div className=\"flex rounded-md overflow-hidden border\">\n              <button\n                className={`px-4 py-2 flex-1 text-sm ${\n                  variant === \"grid\" ? \"bg-amber-500 text-white\" : \"bg-white\"\n                }`}\n                onClick={() => handleVariantChange(\"grid\")}\n              >\n                Grid\n              </button>\n              <button\n                className={`px-4 py-2 flex-1 text-sm ${\n                  variant === \"masonry\" ? \"bg-amber-500 text-white\" : \"bg-white\"\n                }`}\n                onClick={() => handleVariantChange(\"masonry\")}\n              >\n                Masonry\n              </button>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Columns</label>\n            <div className=\"flex rounded-md overflow-hidden border\">\n              <button\n                className={`px-4 py-2 flex-1 text-sm ${\n                  columns === 2 ? \"bg-amber-500 text-white\" : \"bg-white\"\n                }`}\n                onClick={() => handleColumnsChange(2)}\n              >\n                2\n              </button>\n              <button\n                className={`px-4 py-2 flex-1 text-sm ${\n                  columns === 3 ? \"bg-amber-500 text-white\" : \"bg-white\"\n                }`}\n                onClick={() => handleColumnsChange(3)}\n              >\n                3\n              </button>\n              <button\n                className={`px-4 py-2 flex-1 text-sm ${\n                  columns === 4 ? \"bg-amber-500 text-white\" : \"bg-white\"\n                }`}\n                onClick={() => handleColumnsChange(4)}\n              >\n                4\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Gallery component */}\n      <FoodGallery\n        items={galleryItems}\n        variant={variant}\n        columns={columns}\n        title=\"Our Signature Dishes\"\n        subtitle=\"Explore our seasonal menu highlights and signature creations\"\n        showCategories={true}\n        enableLightbox={true}\n      />\n\n      {/* Component usage example */}\n      <div className=\"mt-12 border-t pt-8 px-4 max-w-4xl mx-auto\">\n        <h3 className=\"text-lg font-medium mb-2\">Component Usage Example</h3>\n        <pre className=\"bg-gray-100 p-4 rounded text-sm overflow-x-auto\">\n          {`// Import the component\nimport { FoodGallery } from \"@/components/food-gallery\";\n\n// Define your gallery items\nconst galleryItems = [\n  {\n    id: \"dish-1\",\n    src: \"/images/salmon-dish.jpg\",\n    alt: \"Salmon dish\",\n    width: 1200,\n    height: 800,\n    category: \"Main Course\",\n    description: \"Pan-seared salmon with seasonal vegetables\"\n  },\n  // More gallery items...\n];\n\n// Use the component in your page\nexport default function MenuGallery() {\n  return (\n    <FoodGallery\n      items={galleryItems}\n      variant=\"${variant}\"\n      columns={${columns}}\n      title=\"Our Signature Dishes\"\n      showCategories={true}\n      enableLightbox={true}\n    />\n  );\n}`}\n        </pre>\n      </div>\n\n      {/* Prismic integration example */}\n      <div className=\"mt-8 border-t pt-8 px-4 max-w-4xl mx-auto\">\n        <h3 className=\"text-lg font-medium mb-2\">\n          Prismic Integration Example\n        </h3>\n        <pre className=\"bg-gray-100 p-4 rounded text-sm overflow-x-auto\">\n          {`import { createClient } from \"@prismicio/client\";\nimport { FoodGallery } from \"@/components/food-gallery\";\nimport { formatPrismicGalleryItems } from \"@/lib/gallery-utils\";\n\n// Fetch data from Prismic\nexport async function getStaticProps() {\n  const client = createClient(/* your Prismic config */);\n  const galleryData = await client.getAllByType(\"gallery_item\");\n  \n  return {\n    props: {\n      galleryItems: formatPrismicGalleryItems(galleryData)\n    }\n  };\n}\n\nexport default function GalleryPage({ galleryItems }) {\n  return (\n    <FoodGallery\n      items={galleryItems}\n      variant=\"${variant}\"\n      columns={${columns}}\n      title=\"Our Menu Gallery\"\n    />\n  );\n}`}\n        </pre>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}