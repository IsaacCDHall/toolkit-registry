{
  "name": "menu-display",
  "type": "registry:component",
  "title": "Restaurant Menu Display",
  "description": "Interactive menu display with category filtering and item details",
  "dependencies": [],
  "registryDependencies": [
    "card",
    "tabs",
    "badge"
  ],
  "files": [
    {
      "name": "menu-display.tsx",
      "path": "registry/restaurant-components/menu-display/menu-display.tsx",
      "content": "import React from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface MenuItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  price: string;\n  isSpecial?: boolean;\n  tags?: string[];\n  imageUrl?: string;\n  allergens?: string[];\n}\n\nexport interface MenuCategoryProps {\n  id: string;\n  name: string;\n  description?: string;\n  items: MenuItemProps[];\n}\n\nexport interface MenuDisplayProps {\n  categories: MenuCategoryProps[];\n  variant?: \"grid\" | \"list\";\n  highlightSpecials?: boolean;\n  showAllergens?: boolean;\n  showImages?: boolean;\n}\n\nexport function MenuDisplay({\n  categories,\n  variant = \"grid\",\n  highlightSpecials = false,\n  showAllergens = true,\n  showImages = false,\n}: MenuDisplayProps) {\n  // If no categories, show empty state\n  if (!categories || categories.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-muted-foreground\">No menu items available</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"w-full\">\n      <Tabs defaultValue={categories[0]?.id} className=\"w-full\">\n        <TabsList className=\"mb-8 flex flex-wrap h-auto justify-center\">\n          {categories.map((category) => (\n            <TabsTrigger\n              key={category.id}\n              value={category.id}\n              className=\"px-4 py-2 data-[state=active]:font-medium\"\n            >\n              {category.name}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {categories.map((category) => (\n          <TabsContent key={category.id} value={category.id} className=\"mt-0\">\n            {category.description && (\n              <div className=\"mb-6 text-center\">\n                <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                  {category.description}\n                </p>\n              </div>\n            )}\n\n            <div\n              className={\n                variant === \"grid\"\n                  ? \"grid grid-cols-1 md:grid-cols-2 gap-6\"\n                  : \"space-y-6\"\n              }\n            >\n              {category.items.map((item) => (\n                <MenuItemCard\n                  key={item.id}\n                  item={item}\n                  highlightSpecials={highlightSpecials}\n                  showAllergens={showAllergens}\n                  showImage={showImages}\n                />\n              ))}\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n}\n\nfunction MenuItemCard({\n  item,\n  highlightSpecials,\n  showAllergens,\n  showImage,\n}: {\n  item: MenuItemProps;\n  highlightSpecials: boolean;\n  showAllergens: boolean;\n  showImage: boolean;\n}) {\n  return (\n    <Card\n      className={highlightSpecials && item.isSpecial ? \"border-primary\" : \"\"}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-lg font-semibold\">\n              {item.name}\n              {highlightSpecials && item.isSpecial && (\n                <Badge className=\"ml-2 bg-primary text-primary-foreground\">\n                  Special\n                </Badge>\n              )}\n            </CardTitle>\n            {item.tags && item.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {item.tags.map((tag) => (\n                  <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n          <span className=\"font-medium\">{item.price}</span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {showImage && item.imageUrl && (\n          <div className=\"w-full h-40 relative mb-4 overflow-hidden rounded-md\">\n            <img\n              src={item.imageUrl}\n              alt={item.name}\n              className=\"object-cover w-full h-full\"\n            />\n          </div>\n        )}\n        {item.description && (\n          <CardDescription className=\"text-sm mt-1\">\n            {item.description}\n          </CardDescription>\n        )}\n        {showAllergens && item.allergens && item.allergens.length > 0 && (\n          <div className=\"mt-3 text-xs text-muted-foreground\">\n            <span className=\"font-medium\">Allergens: </span>\n            {item.allergens.join(\", \")}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Example of Prismic integration\nexport const PrismicMenuExampleUsage = `\nimport { createClient } from '@prismicio/client';\nimport { MenuDisplay } from '@/components/restaurant/menu-display';\n\nexport async function RestaurantMenu() {\n  const client = createClient('your-repository-name');\n  \n  // Fetch menu data from Prismic\n  const menuData = await client.getSingle('menu_page');\n  \n  // Transform Prismic data to component props\n  const categories = menuData.data.menu_categories.map(category => ({\n    id: category.category_id,\n    name: category.category_name,\n    description: category.category_description,\n    items: category.items.map(item => ({\n      id: item.item_id,\n      name: item.item_name,\n      description: item.item_description,\n      price: item.item_price,\n      isSpecial: item.is_special,\n      tags: item.tags,\n      imageUrl: item.item_image?.url,\n      allergens: item.allergens\n    }))\n  }));\n  \n  return (\n    <div className=\"container mx-auto py-12\">\n      <h2 className=\"text-3xl font-bold text-center mb-10\">Our Menu</h2>\n      <MenuDisplay \n        categories={categories}\n        variant=\"grid\"\n        highlightSpecials={true}\n        showAllergens={true}\n        showImages={true}\n      />\n    </div>\n  );\n}\n`;\n",
      "type": "registry:component"
    },
    {
      "name": "menu-formatter.ts",
      "path": "registry/restaurant-components/menu-display/menu-formatter.ts",
      "content": "import { MenuCategoryProps, MenuItemProps } from \"./menu-display\";\n\n/**\n * Sorts menu items by price from lowest to highest\n */\nexport function sortMenuItemsByPrice(items: MenuItemProps[]): MenuItemProps[] {\n  return [...items].sort((a, b) => {\n    // Extract numeric values from price strings (assuming format like \"$10.99\")\n    const priceA = parseFloat(a.price.replace(/[^0-9.]/g, \"\"));\n    const priceB = parseFloat(b.price.replace(/[^0-9.]/g, \"\"));\n\n    return priceA - priceB;\n  });\n}\n\n/**\n * Sorts menu items by name alphabetically\n */\nexport function sortMenuItemsByName(items: MenuItemProps[]): MenuItemProps[] {\n  return [...items].sort((a, b) => a.name.localeCompare(b.name));\n}\n\n/**\n * Filters menu items by tag\n */\nexport function filterMenuItemsByTag(\n  items: MenuItemProps[],\n  tag: string\n): MenuItemProps[] {\n  return items.filter((item) => item.tags?.includes(tag));\n}\n\n/**\n * Puts special items at the top of the list\n */\nexport function prioritizeSpecialItems(\n  items: MenuItemProps[]\n): MenuItemProps[] {\n  return [...items].sort((a, b) => {\n    if (a.isSpecial && !b.isSpecial) return -1;\n    if (!a.isSpecial && b.isSpecial) return 1;\n    return 0;\n  });\n}\n\n/**\n * Formats a numeric price to a price string with currency symbol\n */\nexport function formatPrice(price: number, currency: string = \"$\"): string {\n  return `${currency}${price.toFixed(2)}`;\n}\n\n/**\n * Transforms Prismic menu data to component props\n * This is an example function that would need to be adjusted\n * based on your actual Prismic schema\n */\nexport function transformPrismicMenuData(\n  prismicData: any\n): MenuCategoryProps[] {\n  if (!prismicData?.data?.menu_categories) {\n    return [];\n  }\n\n  return prismicData.data.menu_categories.map((category: any) => ({\n    id:\n      category.category_id ||\n      `category-${Math.random().toString(36).substr(2, 9)}`,\n    name: category.category_name || \"Untitled Category\",\n    description: category.category_description || \"\",\n    items: (category.items || []).map((item: any) => ({\n      id: item.item_id || `item-${Math.random().toString(36).substr(2, 9)}`,\n      name: item.item_name || \"Untitled Item\",\n      description: item.item_description || \"\",\n      price: item.item_price || \"$0.00\",\n      isSpecial: Boolean(item.is_special),\n      tags: item.tags || [],\n      imageUrl: item.item_image?.url || \"\",\n      allergens: item.allergens || [],\n    })),\n  }));\n}\n\n// Example usage\nexport const ExampleUsage = `\nimport { \n  transformPrismicMenuData,\n  sortMenuItemsByPrice,\n  prioritizeSpecialItems\n} from '@/components/restaurant/menu-formatter';\nimport { createClient } from '@prismicio/client';\n\nexport async function getMenuData() {\n  const client = createClient('your-repo-name');\n  const menuData = await client.getSingle('menu_page');\n  \n  // Transform the raw Prismic data to our component format\n  const categories = transformPrismicMenuData(menuData);\n  \n  // Process the data - put specials at the top, then sort by price\n  const processedCategories = categories.map(category => ({\n    ...category,\n    items: sortMenuItemsByPrice(prioritizeSpecialItems(category.items))\n  }));\n  \n  return processedCategories;\n}\n`;\n",
      "type": "registry:lib"
    }
  ]
}