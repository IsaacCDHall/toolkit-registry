{
  "name": "reservation-widget",
  "type": "registry:component",
  "title": "Restaurant Reservation Widget",
  "description": "Interactive reservation form with date/time selection and guest information",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "label",
    "select",
    "popover",
    "calendar"
  ],
  "files": [
    {
      "name": "reservation-widget.tsx",
      "path": "registry/restaurant-components/reservation/reservation-widget.tsx",
      "content": "import React from \"react\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\n\nexport interface ReservationWidgetProps {\n  title?: string;\n  subtitle?: string;\n  minGuests?: number;\n  maxGuests?: number;\n  availableTimes?: string[];\n  onSubmit?: (reservationData: ReservationData) => void;\n  darkMode?: boolean;\n  isLoading?: boolean;\n  reservationUrl?: string;\n}\n\nexport interface ReservationData {\n  date: Date;\n  time: string;\n  guests: number;\n  name: string;\n  email: string;\n  phone: string;\n  specialRequests?: string;\n}\n\nexport function ReservationWidget({\n  title = \"Make a Reservation\",\n  subtitle = \"Book your table online\",\n  minGuests = 1,\n  maxGuests = 12,\n  availableTimes = [\n    \"18:00\",\n    \"18:30\",\n    \"19:00\",\n    \"19:30\",\n    \"20:00\",\n    \"20:30\",\n    \"21:00\",\n    \"21:30\",\n  ],\n  onSubmit,\n  darkMode = false,\n  isLoading = false,\n  reservationUrl,\n}: ReservationWidgetProps) {\n  const [date, setDate] = React.useState<Date | undefined>(undefined);\n  const [time, setTime] = React.useState<string>(\"\");\n  const [guests, setGuests] = React.useState<number>(2);\n  const [name, setName] = React.useState<string>(\"\");\n  const [email, setEmail] = React.useState<string>(\"\");\n  const [phone, setPhone] = React.useState<string>(\"\");\n  const [specialRequests, setSpecialRequests] = React.useState<string>(\"\");\n\n  // Generate guests options from min to max\n  const guestsOptions = Array.from(\n    { length: maxGuests - minGuests + 1 },\n    (_, i) => minGuests + i\n  );\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!date || !time || !guests || !name || !email || !phone) {\n      alert(\"Please fill in all required fields\");\n      return;\n    }\n\n    const reservationData: ReservationData = {\n      date,\n      time,\n      guests,\n      name,\n      email,\n      phone,\n      specialRequests,\n    };\n\n    if (onSubmit) {\n      onSubmit(reservationData);\n    } else if (reservationUrl) {\n      // Handle external reservation URL\n      window.open(\n        `${reservationUrl}?date=${format(\n          date,\n          \"yyyy-MM-dd\"\n        )}&time=${time}&guests=${guests}&name=${encodeURIComponent(\n          name\n        )}&email=${encodeURIComponent(email)}&phone=${encodeURIComponent(\n          phone\n        )}&special_requests=${encodeURIComponent(specialRequests)}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  return (\n    <Card className={darkMode ? \"bg-slate-900 text-white\" : \"\"}>\n      <CardHeader>\n        <CardTitle className=\"text-xl font-bold text-center\">{title}</CardTitle>\n        {subtitle && (\n          <p\n            className={`text-center text-sm ${\n              darkMode ? \"text-slate-300\" : \"text-muted-foreground\"\n            }`}\n          >\n            {subtitle}\n          </p>\n        )}\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Date picker */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date\">Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={`w-full justify-start text-left font-normal ${\n                      !date ? \"text-muted-foreground\" : \"\"\n                    }`}\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {date ? format(date, \"PPP\") : \"Select date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={date}\n                    onSelect={setDate}\n                    initialFocus\n                    disabled={(date) => date < new Date()}\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            {/* Time select */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"time\">Time</Label>\n              <Select value={time} onValueChange={setTime}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select time\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableTimes.map((timeOption) => (\n                    <SelectItem key={timeOption} value={timeOption}>\n                      {timeOption}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Guests select */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"guests\">Guests</Label>\n              <Select\n                value={guests.toString()}\n                onValueChange={(value) => setGuests(parseInt(value))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Number of guests\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {guestsOptions.map((num) => (\n                    <SelectItem key={num} value={num.toString()}>\n                      {num} {num === 1 ? \"guest\" : \"guests\"}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Name input */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"Your name\"\n                required\n              />\n            </div>\n\n            {/* Email input */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Your email\"\n                required\n              />\n            </div>\n\n            {/* Phone input */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                placeholder=\"Your phone number\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Special requests */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"specialRequests\">Special Requests (optional)</Label>\n            <Input\n              id=\"specialRequests\"\n              value={specialRequests}\n              onChange={(e) => setSpecialRequests(e.target.value)}\n              placeholder=\"Allergies, special occasions, etc.\"\n            />\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? \"Processing...\" : \"Book Table\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Example of Prismic integration\nexport const PrismicReservationExample = `\nimport { createClient } from '@prismicio/client';\nimport { ReservationWidget } from '@/components/restaurant/reservation-widget';\n\nexport async function RestaurantReservation() {\n  const client = createClient('your-repository-name');\n  \n  // Fetch reservation settings from Prismic\n  const settings = await client.getSingle('reservation_settings');\n  \n  // Handle reservation submission\n  const handleReservation = async (data) => {\n    // Send to your reservation system API\n    const response = await fetch('/api/reservations', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    \n    if (response.ok) {\n      alert('Reservation submitted successfully!');\n    } else {\n      alert('There was an error submitting your reservation. Please try again.');\n    }\n  };\n  \n  return (\n    <div className=\"container mx-auto py-12\">\n      <div className=\"max-w-md mx-auto\">\n        <ReservationWidget\n          title={settings.data.reservation_title}\n          subtitle={settings.data.reservation_subtitle}\n          minGuests={settings.data.min_guests || 1}\n          maxGuests={settings.data.max_guests || 12}\n          availableTimes={settings.data.available_times}\n          onSubmit={handleReservation}\n          darkMode={settings.data.dark_mode}\n          reservationUrl={settings.data.external_reservation_url}\n        />\n      </div>\n    </div>\n  );\n}\n`;\n",
      "type": "registry:component"
    }
  ]
}