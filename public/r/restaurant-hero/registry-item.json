{
  "name": "restaurant-hero",
  "type": "registry:component",
  "title": "Restaurant Hero Section",
  "description": "Hero section with configurable background image, headline, and CTA for restaurant sites",
  "dependencies": [],
  "registryDependencies": [
    "button",
    "image"
  ],
  "files": [
    {
      "name": "hero.tsx",
      "path": "registry/restaurant-components/hero/hero.tsx",
      "content": "import React from \"react\";\nimport Image from \"next/image\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeroProps {\n  title: string;\n  subtitle?: string;\n  backgroundImage: {\n    url: string;\n    alt: string;\n  };\n  cta?: {\n    text: string;\n    url: string;\n  };\n  overlay?: boolean;\n  height?: \"small\" | \"medium\" | \"large\" | \"full\";\n  textAlign?: \"left\" | \"center\" | \"right\";\n  textColor?: string;\n}\n\nexport function RestaurantHero({\n  title,\n  subtitle,\n  backgroundImage,\n  cta,\n  overlay = true,\n  height = \"medium\",\n  textAlign = \"center\",\n  textColor = \"white\",\n}: HeroProps) {\n  // Map height values to actual classes\n  const heightClasses = {\n    small: \"h-[300px]\",\n    medium: \"h-[500px]\",\n    large: \"h-[700px]\",\n    full: \"h-screen\",\n  };\n\n  // Map text alignment to classes\n  const alignClasses = {\n    left: \"text-left\",\n    center: \"text-center\",\n    right: \"text-right\",\n  };\n\n  return (\n    <div className={`relative w-full ${heightClasses[height]} overflow-hidden`}>\n      {/* Background Image */}\n      <div className=\"absolute inset-0 w-full h-full\">\n        <Image\n          src={backgroundImage.url}\n          alt={backgroundImage.alt}\n          fill\n          priority\n          sizes=\"100vw\"\n          style={{ objectFit: \"cover\" }}\n        />\n\n        {/* Optional overlay for better text readability */}\n        {overlay && <div className=\"absolute inset-0 bg-black/40\"></div>}\n      </div>\n\n      {/* Content */}\n      <div\n        className={`relative z-10 h-full flex flex-col items-center justify-center px-4 sm:px-6 ${alignClasses[textAlign]}`}\n      >\n        <div className=\"max-w-4xl mx-auto\">\n          <h1\n            className={`text-4xl md:text-5xl lg:text-6xl font-bold mb-4`}\n            style={{ color: textColor }}\n          >\n            {title}\n          </h1>\n\n          {subtitle && (\n            <p\n              className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto\"\n              style={{ color: textColor }}\n            >\n              {subtitle}\n            </p>\n          )}\n\n          {cta && (\n            <Button asChild size=\"lg\" className=\"mt-4\">\n              <a href={cta.url}>{cta.text}</a>\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Add Prismic integration example for documentation\nexport const PrismicHeroExampleUsage = `\n// Example of using the Hero component with Prismic data\nimport { createClient } from '@prismicio/client';\nimport { RestaurantHero } from '@/components/restaurant/hero';\n\n// In your page component\nexport async function HomePage() {\n  const client = createClient('your-repo-name');\n  const page = await client.getSingle('home_page');\n  \n  return (\n    <RestaurantHero\n      title={page.data.hero_title}\n      subtitle={page.data.hero_subtitle}\n      backgroundImage={{\n        url: page.data.hero_background.url,\n        alt: page.data.hero_background.alt\n      }}\n      cta={page.data.hero_cta_text ? {\n        text: page.data.hero_cta_text,\n        url: page.data.hero_cta_link.url\n      } : undefined}\n      overlay={page.data.hero_overlay ?? true}\n      height={page.data.hero_height ?? \"medium\"}\n      textAlign={page.data.hero_text_align ?? \"center\"}\n      textColor={page.data.hero_text_color ?? \"white\"}\n    />\n  );\n}\n`;\n",
      "type": "registry:component"
    },
    {
      "name": "use-parallax.ts",
      "path": "registry/restaurant-components/hero/use-parallax.ts",
      "content": "import { useCallback, useEffect, useState } from \"react\";\n\ninterface UseParallaxOptions {\n  speed?: number; // Speed factor (1 is normal, 0.5 is half speed, 2 is double speed)\n  reverse?: boolean; // Whether to reverse the direction\n  disabled?: boolean; // Whether to disable the effect\n}\n\n/**\n * A hook to create a parallax scrolling effect\n *\n * @param options Configuration options for the parallax effect\n * @returns An object with the calculated transform style\n */\nexport function useParallax({\n  speed = 0.5,\n  reverse = false,\n  disabled = false,\n}: UseParallaxOptions = {}) {\n  const [offset, setOffset] = useState(0);\n  const [isClient, setIsClient] = useState(false);\n\n  // Only enable on client-side to avoid hydration mismatch\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const handleScroll = useCallback(() => {\n    if (disabled || !isClient) return;\n\n    const scrollY = window.scrollY;\n    const direction = reverse ? -1 : 1;\n    const calculatedOffset = scrollY * speed * direction;\n\n    setOffset(calculatedOffset);\n  }, [speed, reverse, disabled, isClient]);\n\n  useEffect(() => {\n    if (!isClient) return;\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    // Call once to set initial position\n    handleScroll();\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [handleScroll, isClient]);\n\n  const transform =\n    disabled || !isClient ? {} : { transform: `translateY(${offset}px)` };\n\n  return { style: transform };\n}\n\n// Example usage\nexport const ExampleUsage = `\nimport { useParallax } from '@/components/hooks/use-parallax';\nimport Image from 'next/image';\n\nexport function ParallaxHero() {\n  const { style } = useParallax({ speed: 0.3 });\n  \n  return (\n    <div className=\"relative h-[600px] overflow-hidden\">\n      <div \n        className=\"absolute inset-0 w-full h-full\"\n        style={style}\n      >\n        <Image\n          src=\"/hero-image.jpg\"\n          alt=\"Restaurant interior\"\n          fill\n          style={{ objectFit: \"cover\" }}\n        />\n      </div>\n      <div className=\"relative z-10 h-full flex items-center justify-center\">\n        <h1 className=\"text-5xl text-white font-bold\">Our Restaurant</h1>\n      </div>\n    </div>\n  );\n}\n`;\n",
      "type": "registry:hook"
    }
  ]
}